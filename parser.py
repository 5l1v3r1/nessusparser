from appJar import gui
import xml2sql as x
import sqlite3
from plugins import *
conn = sqlite3.connect('./reports.db')

def import_options(button):
	if button == 'ok1':
		try:
			x.xml2sqlite(app.getEntry('File'))
			print('\nSuccessfully converted %s to sqlite database' % app.getEntry('File'))
			app.removeAllWidgets()
			start_gui()
		except FileNotFoundError:
			print('File not found')
	else:
		exit()

def select_options(button):
	if button == 'ok2':
		cb_list = [cb for cb in app.getAllCheckBoxes() if app.getCheckBox(cb)]
		for cb in cb_list:
			print("microsoftPatching")
			microsoftPatching.gen(cb)
			print("telnet")
			telnet.gen(cb)
			print("activexControlsParent")
			activexControlsParent.gen(cb)
			print("activexControls")
			activexControls.gen(cb)
			print("winlogonCachedPasswords")
			winlogonCachedPasswords.gen(cb)
			print("windowsUpdateReboot")
			windowsUpdateReboot.gen(cb)
			print("windowsServer2003")
			windowsServer2003.gen(cb)
			print("webInternalIpDisco")
			webInternalIpDisco.gen(cb)
			print("vmwareVsphereUpdateManager")
			vmwareVsphereUpdateManager.gen(cb)
			print("vmwareVcenter")
			vmwareVcenter.gen(cb)
			print("vmwareEsxi")
			vmwareEsxi.gen(cb)
			print("unquotedServicePaths")
			unquotedServicePaths.gen(cb)
			print("sslTlsMultipleIssuesParent")
			sslTlsMultipleIssuesParent.gen(cb)
			print("sslTlsMultipleIssues")
			sslTlsMultipleIssues.gen(cb)
			print("sshV1")
			sshV1.gen(cb)
			print("sqlServerUnsupported")
			sqlServerUnsupported.gen(cb)
			print("smtpExpnVrfy")
			smtpExpnVrfy.gen(cb)
			print("smb")
			smb.gen(cb)
			print("sambaVersionVulnerabilities")
			sambaVersionVulnerabilities.gen(cb)
			print("anonymousFtp")
			anonymousFtp.gen(cb)
			print("apache13Vulnerabilities")
			apache13Vulnerabilities.gen(cb)
			print("apache22Vulnerabilities")
			apache22Vulnerabilities.gen(cb)
			print("apacheTomcat")
			apacheTomcat.gen(cb)
			print("besManagementConsoleVulnerabilities")
			besManagementConsoleVulnerabilities.gen(cb)
			print("buildReviewAixParent")
			buildReviewAixParent.gen(cb)
			print("buildReviewAix")
			buildReviewAix.gen(cb)
			print("buildReviewRhelParent")
			buildReviewRhelParent.gen(cb)
			print("buildReviewRhelWip")
			buildReviewRhelWip.gen(cb)
			print("buildReviewWindowsParent")
			buildReviewWindowsParent.gen(cb)
			print("buildReviewWindows")
			buildReviewWindows.gen(cb)
			print("chargenDos")
			chargenDos.gen(cb)
			print("codemeter")
			codemeter.gen(cb)
			print("cookieHttponlyFlag")
			cookieHttponlyFlag.gen(cb)
			print("cookieSecureFlag")
			cookieSecureFlag.gen(cb)
			print("dnsDynRecord")
			dnsDynRecord.gen(cb)
			print("dnsIssuesParent")
			dnsIssuesParent.gen(cb)
			print("dnsIssues")
			dnsIssues.gen(cb)
			print("eiqEsaVulnerabilities")
			eiqEsaVulnerabilities.gen(cb)
			print("firebirdDefaultCreds")
			firebirdDefaultCreds.gen(cb)
			print("ftpCleartext")
			ftpCleartext.gen(cb)
			print("hpSmh")
			hpSmh.gen(cb)
			print("httpHeadersParent")
			httpHeadersParent.gen(cb)
			print("httpHeaders")
			httpHeaders.gen(cb)
			print("ibmBigfix")
			ibmBigfix.gen(cb)
			print("ibmClearquest")
			ibmClearquest.gen(cb)
			print("ibmDb2105")
			ibmDb2105.gen(cb)
			print("ibmDb297")
			ibmDb297.gen(cb)
			print("ibmGcmFirmware")
			ibmGcmFirmware.gen(cb)
			print("ibmTivoliStorageServer")
			ibmTivoliStorageServer.gen(cb)
			print("ibmWasVunerabilities")
			ibmWasVunerabilities.gen(cb)
			print("ibmWebsphere")
			ibmWebsphere.gen(cb)
			print("imagemagick")
			imagemagick.gen(cb)
			print("insecureServicePermissions")
			insecureServicePermissions.gen(cb)
			print("ldapNullBase")
			ldapNullBase.gen(cb)
			print("linuxKernelTcpSeq")
			linuxKernelTcpSeq.gen(cb)
			print("lmNtlm")
			lmNtlm.gen(cb)
			print("mcafeeVse")
			mcafeeVse.gen(cb)
			print("microsoftMalware")
			microsoftMalware.gen(cb)
			print("microsoftScep")
			microsoftScep.gen(cb)
			print("microsoftSmbv1")
			microsoftSmbv1.gen(cb)
			print("miniupnpVersion1")
			miniupnpVersion1.gen(cb)
			print("msXmlParsers")
			msXmlParsers.gen(cb)
			print("ntpMultipleIssuesParent")
			ntpMultipleIssuesParent.gen(cb)
			print("ntpMultipleIssues")
			ntpMultipleIssues.gen(cb)
			print("opensshMaxAuth")
			opensshMaxAuth.gen(cb)
			print("opensshVulnerabilities")
			opensshVulnerabilities.gen(cb)
			print("openssl097")
			openssl097.gen(cb)
			print("openssl098")
			openssl098.gen(cb)
			print("openssl101")
			openssl101.gen(cb)
			print("opensslCcs")
			opensslCcs.gen(cb)
			print("opensslHeartbleed")
			opensslHeartbleed.gen(cb)
			print("oracleDatabase")
			oracleDatabase.gen(cb)
			print("oracleGlassfish")
			oracleGlassfish.gen(cb)
			print("oracleTnsListenerPoisoning")
			oracleTnsListenerPoisoning.gen(cb)
			print("oracleWeblogic")
			oracleWeblogic.gen(cb)
			print("outdatedSoftwareParent")
			outdatedSoftwareParent.gen(cb)
			print("outdatedSoftware")
			outdatedSoftware.gen(cb)
			print("phpVulnerabilities")
			phpVulnerabilities.gen(cb)
			print("rlogin")
			rlogin.gen(cb)
			print("rServices")
			rServices.gen(cb)
			print("sambaBadlock")
			sambaBadlock.gen(cb)
			print(cb, 'report finished')
		exit()
	else:
		exit()

app = gui('NessusParser', '378x264')
def start_gui():
	app.startTabbedFrame('TabbedFrame')
	app.startTab('Import')
	app.addLabel('file_dest', 'Click to open file')
	app.addFileEntry('File')
	row = app.getRow()
	app.addNamedButton('OK', 'ok1', import_options, row, 1)
	app.addNamedButton('Exit', 'exit1', import_options, row, 2)
	app.stopTab()

	app.startTab('Select')
	try:
		c = conn.cursor()
		c.execute('select DISTINCT reports.report_name from reports')
		for rc in c.fetchall():
			app.addCheckBox(rc[0])
	except sqlite3.OperationalError:
		app.addLabel('The database appears to be empty.\nImport a file first')
	
	row = app.getRow()
	app.addNamedButton('OK', 'ok2', select_options, row, 1)
	app.addNamedButton('Exit', 'exit2', select_options, row, 2)
	app.stopTab()
	app.stopTabbedFrame()

start_gui()
app.go()