from appJar import gui
import xml2sql as x
import sqlite3
from plugins import *
conn = sqlite3.connect('./reports.db')

def import_options(button):
	if button == 'ok1':
		try:
			x.xml2sqlite(app.getEntry('File'))
			print('\nSuccessfully converted %s to sqlite database' % app.getEntry('File'))
			app.removeAllWidgets()
			start_gui()
		except FileNotFoundError:
			print('File not found')
	else:
		exit()

def select_options(button):
	if button == 'ok2':
		cb_list = [cb for cb in app.getAllCheckBoxes() if app.getCheckBox(cb)]
		for cb in cb_list:
			telnet.gen(cb)
			activexControlsParent.gen(cb)
			activexControls.gen(cb)
			winlogonCachedPasswords.gen(cb)
			windowsUpdateReboot.gen(cb)
			windowsServer2003.gen(cb)
			webInternalIpDisco.gen(cb)
			vmwareVsphereUpdateManager.gen(cb)
			vmwareVcenter.gen(cb)
			vmwareEsxi.gen(cb)
			unquotedServicePaths.gen(cb)
			sslTlsMultipleIssuesParent.gen(cb)
			sslTlsMultipleIssues.gen(cb)
			sshV1.gen(cb)
			sqlServerUnsupported.gen(cb)
			smtpExpnVrfy.gen(cb)
			smb.gen(cb)
			sambaVersionVulnerabilities.gen(cb)
			anonymousFtp.gen(cb)
			apache13Vulnerabilities.gen(cb)
			apache22Vulnerabilities.gen(cb)
			apacheTomcat.gen(cb)
			besManagementConsoleVulnerabilities.gen(cb)
			buildReviewAixParent.gen(cb)
			buildReviewAix.gen(cb)
			buildReviewRhelParent.gen(cb)
			buildReviewRhelWip.gen(cb)
			buildReviewWindowsParent.gen(cb)
			buildReviewWindows.gen(cb)
			chargenDos.gen(cb)
			codemeter.gen(cb)
			cookieHttponlyFlag.gen(cb)
			cookieSecureFlag.gen(cb)
			dnsDynRecord.gen(cb)
			dnsIssuesParent.gen(cb)
			dnsIssues.gen(cb)
			eiqEsaVulnerabilities.gen(cb)
			firebirdDefaultCreds.gen(cb)
			ftpCleartext.gen(cb)
			hpSmh.gen(cb)
			httpHeadersParent.gen(cb)
			httpHeaders.gen(cb)
			ibmBigfix.gen(cb)
			ibmClearquest.gen(cb)
			ibmDb2105.gen(cb)
			ibmDb297.gen(cb)
			ibmGcmFirmware.gen(cb)
			ibmTivoliStorageServer.gen(cb)
			ibmWasVunerabilities.gen(cb)
			ibmWebsphere.gen(cb)
			imagemagick.gen(cb)
			insecureServicePermissions.gen(cb)
			ldapNullBase.gen(cb)
			linuxKernelTcpSeq.gen(cb)
			lmNtlm.gen(cb)
			mcafeeVse.gen(cb)
			microsoftMalware.gen(cb)
			microsoftScep.gen(cb)
			microsoftSmbv1.gen(cb)
			miniupnpVersion1.gen(cb)
			msXmlParsers.gen(cb)
			ntpMultipleIssuesParent.gen(cb)
			ntpMultipleIssues.gen(cb)
			opensshMaxAuth.gen(cb)
			opensshVulnerabilities.gen(cb)
			openssl097.gen(cb)
			openssl098.gen(cb)
			openssl101.gen(cb)
			opensslCcs.gen(cb)
			opensslHeartbleed.gen(cb)
			oracleDatabase.gen(cb)
			oracleGlassfish.gen(cb)
			oracleTnsListenerPoisoning.gen(cb)
			oracleWeblogic.gen(cb)
			outdatedSoftwareParent.gen(cb)
			outdatedSoftware.gen(cb)
			phpVulnerabilities.gen(cb)
			rlogin.gen(cb)
			rServices.gen(cb)
			sambaBadlock.gen(cb)
		print('Done')
		exit()
	else:
		exit()

app = gui('NessusParser', '335x235')
def start_gui():
	app.startTabbedFrame('TabbedFrame')
	app.startTab('Import')
	app.addLabel('file_dest', 'Click to open file')
	app.addFileEntry('File')
	row = app.getRow()
	app.addNamedButton('OK', 'ok1', import_options, row, 1)
	app.addNamedButton('Exit', 'exit1', import_options, row, 2)
	app.stopTab()

	app.startTab('Select')
	try:
		c = conn.cursor()
		c.execute('select DISTINCT reports.report_name from reports')
		for rc in c.fetchall():
			app.addCheckBox(rc[0])
	except sqlite3.OperationalError:
		app.addLabel('The database appears to be empty.\nImport a file first')
	
	row = app.getRow()
	app.addNamedButton('OK', 'ok2', select_options, row, 1)
	app.addNamedButton('Exit', 'exit2', select_options, row, 2)
	app.stopTab()
	app.stopTabbedFrame()

start_gui()
app.go()
